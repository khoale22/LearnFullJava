<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->

SinhVien a("Garu",20);
SinhVien b("Garu",20);

Sau đó trong hàm main mình gọi hàm a.equal(b) thì nó trả về giá trị là false.
equals nó sẽ so sánh nội dung đối với kiểu String,nếu so sánh 2 đối tượng thì equals nó lại không sử dụng kiểu so sánh đo được mà so sánh theo kiểu tham chiếu đến đối tượng
2 đối tượng bạn tạo mặc dù nó giống nhau nhưng nó lại là 2 đối tượng độc lập nên khi dùng equals thì trả về false
Để cho nó bằng true thì Sinhvien b =a ;


VD1: Giả sử tôi có đoạn code như sau:

String a = new String(“abc”);
String b = new String(“abc”);

System.out.println(“a==b ? ”+ (a==b));// kết quả: a==b?false

System.out.println(“a.equals(b)?” + a.equals(b));// kết quả e.quals(b)?true

Vậy tại sao kết quả lại khác nhau?

Trong JAVA, có 2 kiểu biến: biến tham trị và tham chiếu.
Biến kiểu tham trị bao gồm các kiểu nguyên thủy của JAVA như: int, long, double…
Biến kiểu tham chiếu bao gồm: String, array, kiểu đối tượng…

Khi sử dụng biến kiểu tham trị, JAVA chỉ cho phép bạn sử dụng toán tử so sánh “==”.
Khi sử dụng biến kiểu tham chiếu, JAVA cho phép sử dụng cả toán tử “==” và equals(). Tuy nhiên, khi sử dụng toán tử “==”, bộ xử lý của JAVA sẽ so sánh xem 2 biến tham chiếu này có trỏ đến cùng một đối tượng hay không, còn nếu bạn sử dụng phương thức equals(), bộ xử lý JAVA sẽ so sánh giá trị của 2 biến tham chiếu đó. Điều này lý giải tại sao ở ví dụ trên, khi sử dụng phép toán: a.equals(b) => kết quả trả về bằng true, trong khi a==b => kết quả trả về lại bằng false.

Để hiểu hơn, tôi xét thêm một ví dụ nữa:

String a = new String(“abc”);
String b = a;

System.out.println(“a==b ? ”+ (a==b));// kết quả: a==b?true
System.out.println(“a.equals(b)?” + a.equals(b));// kết quả e.quals(b)?true

2.1

List là một kiểu Collection và là Interface dành cho kiểu danh sách.

ArrayList là một danh sách kiểu mảng, là một lớp thực thể (concrete) của List.

2 Likes

List là một kiểu Collection và là Interface dành cho kiểu danh sách.

ArrayList là một danh sách kiểu mảng, là một lớp thực thể (concrete) của List.
ArrayList implement List. List là một interface


2.2 Array va arraylist

Ả\
Array	ArrayList
1) Kích thước cố định.	Kích thước có thể thay đổi được.
2) Có thể lưu trữ dữ liệu kiểu nguyên thủy và đối tượng.	Chỉ có thể lưu trữ dữ liệu kiểu đối tượng. Kể từ Java 5, kiểu nguyên thủy được tự động chuyển đổi trong các đối tượng được gọi là auto-boxing.
3) Tốc độ lưu trữ và thao tác nhanh hơn.	Tốc độ lưu trữ vào thao tác chậm hơn.
4) Chỉ có thuộc tính length.	Có nhiều phương thức để thao tác với dữ liệu.

<root>
    
</root>
